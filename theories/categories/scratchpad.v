
(* Program Definition unopposite_func {C D} (F : functor (C ᵒᵖ) (D ᵒᵖ)) : functor C D := *)
(*   MkFunc (λ c : obj C, F ₒ c) (λ _ _ f, F ₕ f) _ _ _. *)
(* (* Next Obligation. *) *)
(* (*   intros; simpl. *) *)
(* (*   repeat intros ?. *) *)
(* (*   apply (h_map_proper _ _ F b a x y H). *) *)
(* (* Defined. *) *)
(* (* Next Obligation. *) *)
(* (*   intros; simpl. *) *)
(* (*   apply (h_map_comp _ _ F _ _ _ g f). *) *)
(* (* Defined. *) *)
(* (* Next Obligation. *) *)
(* (*   intros; simpl. *) *)
(* (*   apply (h_map_id _ _ F a). *) *)
(* (* Defined. *) *)
(* Solve All Obligations *)
(*   with repeat intros ?; rewrite /= ?h_map_comp ?h_map_id; solve_by_equiv_rewrite. *)
(* Fail Next Obligation. *)

(* (* Program Definition func_op_forward {C D} : *) *)
(* (*   functor ((FuncCat C D)ᵒᵖ) (FuncCat (C ᵒᵖ) (D ᵒᵖ)) := *) *)
(* (*   (MkFunc (λ x, opposite_func x) (λ _ _ f, MkNat (λ x, nat_map f x) _) _ _ _). *) *)
(* (* Next Obligation. *) *)
(* (*   intros; simpl. *) *)
(* (*   by rewrite naturality. *) *)
(* (* Qed. *) *)
(* (* Next Obligation. *) *)
(* (*   intros; simpl. *) *)
(* (*   solve_proper. *) *)
(* (* Qed. *) *)
(* (* Next Obligation. *) *)
(* (*   by repeat intros ?; simpl. *) *)
(* (* Qed. *) *)
(* (* Next Obligation. *) *)
(* (*   by repeat intros ?; simpl. *) *)
(* (* Qed. *) *)

(* (* Program Definition func_op_backward {C D} : *) *)
(* (*   functor (FuncCat (C ᵒᵖ) (D ᵒᵖ)) ((FuncCat C D)ᵒᵖ) := *) *)
(* (*   (MkFunc (λ x, unopposite_func x) (λ _ _ f, MkNat (λ x, nat_map f x) _) _ _ _). *) *)
(* (* Next Obligation. *) *)
(* (*   intros; simpl in *. *) *)
(* (*   symmetry. *) *)
(* (*   pose proof (naturality f) as H. *) *)
(* (*   simpl in H. *) *)
(* (*   apply H. *) *)
(* (* Qed. *) *)
(* (* Next Obligation. *) *)
(* (*   intros; simpl. *) *)
(* (*   solve_proper. *) *)
(* (* Qed. *) *)
(* (* Next Obligation. *) *)
(* (*   by repeat intros ?; simpl. *) *)
(* (* Qed. *) *)
(* (* Next Obligation. *) *)
(* (*   by repeat intros ?; simpl. *) *)
(* (* Qed. *) *)

(* (* Program Definition func_op_iso {C D} : (FuncCat C D)ᵒᵖ ≃@{Cat} FuncCat (C ᵒᵖ) (D ᵒᵖ) *) *)
(* (*   := MkIsoIc *) *)
(* (*        func_op_forward *) *)
(* (*        func_op_backward *) *)
(* (*        _. *) *)
(* (* Next Obligation. *) *)
(* (*   intros; split; simpl. *) *)
(* (*   - unshelve refine (MkFuncEq _ _ _ _). *) *)
(* (*     + intros; simpl. *) *)
(* (*       destruct a. *) *)
(* (*       reflexivity. *) *)
(* (*     + intros; simpl. *) *)
(* (*       destruct a, b; simpl. *) *)
(* (*       rewrite hom_trans_refl. *) *)
(* (*       intro; simpl. *) *)
(* (*       reflexivity. *) *)
(* (*   - unshelve refine (MkFuncEq _ _ _ _). *) *)
(* (*     + intros; simpl. *) *)
(* (*       destruct a. *) *)
(* (*       reflexivity. *) *)
(* (*     + intros; simpl. *) *)
(* (*       destruct a, b; simpl. *) *)
(* (*       rewrite hom_trans_refl. *) *)
(* (*       intro; simpl. *) *)
(* (*       reflexivity. *) *)
(* (* Qed. *) *)
